/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package adisys.server.gui;

import adisys.server.business.TOInfermiere;
import adisys.server.presentation.frontController.Fc;
import adisys.server.presentation.frontController.FrontController;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.util.ResourceBundle;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * The Class DialogoEsportazione.
 * Finestra che permette lâ€™esportazione dei dati di una 
 * lista di interventi, che ogni infermiere deve compiere. 
 * 
 */
public class DialogoEsportazione extends javax.swing.JDialog {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The window. */
	private static DialogoEsportazione window;

	/** The i fc. */
	private FrontController iFc = Fc.getInstance();

	/**
	 * Creates new form DialogoEsportazione.
	 * 
	 * @param parent
	 *            the parent
	 * @param modal
	 *            the modal
	 */
	public DialogoEsportazione(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		tabellaInfermieri = new javax.swing.JTable();
		pulsanteEsporta = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle(ResourceBundle.getBundle(
				"adisys/server/lang/MessagesBundle_it_IT")
				.getString("UIMsg730")); // NOI18N
		setModal(true);
		setResizable(false);
		setType(java.awt.Window.Type.POPUP);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowActivated(java.awt.event.WindowEvent evt) {
				formWindowActivated(evt);
			}

			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}
		});

		tabellaInfermieri.getTableHeader().setReorderingAllowed(false);
		jScrollPane1.setViewportView(tabellaInfermieri);

		pulsanteEsporta.setText(Fc.MessageBundle("UIMsg710")); // NOI18N
		pulsanteEsporta.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				pulsanteEsportaActionPerformed(evt);
			}
		});

		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/adisys/server/img/decorazioniFinestre/Esportazione.png"))); // NOI18N

		jLabel2.setIcon(new javax.swing.ImageIcon(
				getClass()
						.getResource(
								"/adisys/server/img/decorazioniFinestre/footerEsportazione.png"))); // NOI18N

		jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/adisys/server/img/pulsanti/Home.png"))); // NOI18N
		jButton1.setToolTipText(Fc.MessageBundle("UIMsg95")); // NOI18N
		jButton1.setAlignmentY(0.0F);
		jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		jLabel3.setForeground(new java.awt.Color(255, 102, 0));
		jLabel3.setText(Fc.MessageBundle("UIMsg700")); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jLabel2,
						javax.swing.GroupLayout.Alignment.TRAILING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.Alignment.LEADING,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														0, Short.MAX_VALUE)
												.addGroup(
														layout.createSequentialGroup()
																.addGap(0,
																		0,
																		Short.MAX_VALUE)
																.addComponent(
																		pulsanteEsporta,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		109,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jLabel3)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(
																		jButton1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		33,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														jButton1,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														33,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														jLabel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jLabel3,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										206,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										10, Short.MAX_VALUE)
								.addComponent(pulsanteEsporta)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel2)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Form window activated.
	 * 
	 * @param evt
	 *            the evt
	 */
	private void formWindowActivated(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowActivated
		aggiornaTabella();
	}// GEN-LAST:event_formWindowActivated

	/**
	 * Pulsante esporta action performed.
	 * 
	 * @param evt
	 *            the evt
	 */
	private void pulsanteEsportaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_pulsanteEsportaActionPerformed
		// Controllo selezione valida
		if (tabellaInfermieri.getSelectedRow() != -1) {
			// Selezione valida
			// Ricerca colonna id
			int colonnaID = tabellaInfermieri.getColumnModel().getColumnIndex(
					"ID");

			// Identificazione riga selezionata
			int rigaSelezionata = tabellaInfermieri.getSelectedRow();

			// Recupero ID dell'infermiere
			int idInfermiere = Integer.valueOf(tabellaInfermieri.getValueAt(
					rigaSelezionata, colonnaID).toString());

			// Chiamata funzione di esportazione
			ArrayList<ArrayList<Object>> parametri = new ArrayList<>();
			ArrayList<Object> par = new ArrayList<>();

			// par = new ArrayList<Object>();
			par.add("int");
			par.add((Object) idInfermiere);
			parametri.add(par);

			iFc.processRequest("esportaPianificazione", parametri);

		} else {
			JOptionPane.showMessageDialog(null, Fc.MessageBundle("MsgDialog10")
					+ "\n" + Fc.MessageBundle("MsgDialog15"),
					Fc.MessageBundle("MsgDialog6"), JOptionPane.ERROR_MESSAGE);
		}

	}// GEN-LAST:event_pulsanteEsportaActionPerformed

	/**
	 * J button1 action performed.
	 * 
	 * @param evt
	 *            the evt
	 */
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed

		setVisible(false);
	}// GEN-LAST:event_jButton1ActionPerformed

	/**
	 * Form window closing.
	 * 
	 * @param evt
	 *            the evt
	 */
	private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing

		int result = 0;
		if (!fieldsAreEmpty())
			result = JOptionPane.showConfirmDialog(null,
					Fc.MessageBundle("ConfirmMsg35"), Fc.MessageBundle("ConfirmMsg10"),
					JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
		else
			result = JOptionPane.showConfirmDialog(null,
					Fc.MessageBundle("ConfirmMsg30"),Fc.MessageBundle("ConfirmMsg10"),
					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

		if (result == JOptionPane.YES_OPTION) {
			System.exit(0);
		}
	}// GEN-LAST:event_formWindowClosing

	/**
	 * Start.
	 */
	public static void start() {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException
				| IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(
					DialogoEsportazione.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			// @Override
			public void run() {
				window = new DialogoEsportazione(new javax.swing.JFrame(), true);
				Dimension risoluzioneSchermo = Toolkit.getDefaultToolkit()
						.getScreenSize();
				window.setLocation(new Point((risoluzioneSchermo.width - window
						.getWidth()) / 2, (risoluzioneSchermo.height - window
						.getHeight()) / 2));
				window.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	/** The j button1. */
	private javax.swing.JButton jButton1;

	/** The j label1. */
	private javax.swing.JLabel jLabel1;

	/** The j label2. */
	private javax.swing.JLabel jLabel2;

	/** The j label3. */
	private javax.swing.JLabel jLabel3;

	/** The j scroll pane1. */
	private javax.swing.JScrollPane jScrollPane1;

	/** The pulsante esporta. */
	private javax.swing.JButton pulsanteEsporta;

	/** The tabella infermieri. */
	private javax.swing.JTable tabellaInfermieri;

	// End of variables declaration//GEN-END:variables

	/**
	 * Aggiorna tabella.
	 */
	private void aggiornaTabella() {

		// Popolamento dati
		@SuppressWarnings("unchecked")
		ArrayList<TOInfermiere> listaInfermieri = (ArrayList<TOInfermiere>) iFc
				.processRequest("getTabellaInfoInfermieri",
						new ArrayList<ArrayList<Object>>());
		TOInfermiere toInfermiere;
		DefaultTableModel modelInfermiere = new DefaultTableModel();

		// Assegnazione nomi colonne tabella
		String[] headersInfermiere = Fc
				.getTableHeaderNames("JTableDialogoEsportazione");
		modelInfermiere.setColumnIdentifiers(headersInfermiere);

		// inserimento dei transfer objects nella tabella
		int tLengthInfermieri = listaInfermieri.size();
		for (int i = 0; i < tLengthInfermieri; i++) {
			toInfermiere = listaInfermieri.get(i);
			String[] row = { String.valueOf(toInfermiere.getID()),
					toInfermiere.getNome(), toInfermiere.getCognome(),
					String.valueOf(toInfermiere.getNumInterventi()) };
			modelInfermiere.addRow(row);
		}
		tabellaInfermieri.setModel(modelInfermiere);
	}

	/**
	 * Fields are empty.
	 * 
	 * @return true, if successful
	 */
	private boolean fieldsAreEmpty() {
		return true;
	}
}